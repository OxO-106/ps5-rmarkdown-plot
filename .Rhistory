return(vector_of_strings)
}
## Demonstrate that your approach is successful by passing a
## vector of courses to your function
## For example,
## RemoveDigits(c("INFO 201", "CSE 142", "mps-803c", "K2-team '21"))
## should return
## c("INFO "    "CSE "     "mps-c"    "K-team '")
vec <- remove_digits(c("INFO 201", "CSE 142", "mps-803c", "K2-team '21"))
vec
## Write an if/else statement that checks to see if your vector has any digits.
## If it does have
## digits, print "Oh no!", if it does not then print "Yay!"
## Hint: check out the functions 'any' and 'all'
check <- c("INFO 201", "CSE 142", "mps-803c", "K2-team '21")
for (i in 1:length(check)) {
argument <- "Yay!"
if (str_detect(check[i], "[0-9]")) {
argument <- "Oh no!"
}
}
cat(argument,"\n")
## ---------- A2: Basic R (variables, vectors, functions) ----------
## -------------------- Set up --------------------
## In this assignment we ask you to use `stringr` package for
## the string functions.
## Read more about it in Wickham & Grolemund "R for Data Science"
## http://r4ds.had.co.nz/strings.html
## Install the library if needed and load it
## Ensure you don't install the library more than once!
## -------------------- Defining variables --------------------
## Here we ask you to define, compute, and print a number of variables
## ---------- Example: ----------
## Create variable `my_name` that is equal to your first name
my_name <- "Ott"
cat("I am", my_name, "\n")
## ---------- end of the example ----------
library("stringr")
## Create a numeric variable `my_age` that is equal to your age
my_age <- 18
my_age
## How many seconds is there in a year?  Compute this number!
## Assign it to a suitably named variable and print the result
## with a informative message
seconds.in.year <- 365.25 * 24 * 60 * 60
seconds.in.year
cat("Number of seconds a year is", seconds.in.year, "\n")
## What is your age in seconds?  Use the variable 'my_age' you computed
## above and seconds-in-year, and compute it.  Assign the result to a
## suitable named variable
seconds.in.age <- my_age * seconds.in.year
seconds.in.age
## Are you more than 650M seconds old?  Perform such logical operation and
## assign the result to a variable 'I_am_old'.  Print the result with a
## suitable message
I_am_old <- seconds.in.age > 650000000
I_am_old
cat("Am I more than 650M seconds old?", I_am_old, "\n")
### How many seconds is a typical human lifetime?
life <- 73 # According to google
life
seconds.in.life <- life * seconds.in.year
seconds.in.life
cat("A typical human life time is", seconds.in.life, "seconds.", "\n")
### -------------------- Working with functions --------------------
## Write a function called `make_introduction` that takes in two
## arguments: name, and age.
## This function should return a string value that says something like
## "Hello, my name is {name}, and I'm {age} years old".
## NB!  It should _return_ the string, not print it!
make_introduction <- function(name, age) {
intro <- paste("Hello, my name is", name, ", and I'm", age, "years old")
return(intro)
}
## Create a variable `my_intro` by passing your variables `my_name` and `my_age`
## into your `make_introduction`
## function.  Always print the result!
my_intro <- make_introduction(my_name, my_age)
my_intro
## Create a variable `casual_intro` by substituting "Hello, my name is ",
## with "Hey, I'm" in your `my_intro`
## variable.  Check out stringr functions
## 'str_replace' and 'str_replace_all'
casual_intro <- str_replace(my_intro, "Hello, my name is", "Hey, I'm")
casual_intro
## Create a new variable `loud_intro`, which is your `my_intro` variable
## in all upper-case letters
loud_intro <- str_to_upper(my_intro)
loud_intro
## Using the `str_count` function, create a variable `occurrences` that
## stores the # of times the letter "e"
## appears in `my_intro`
occurrences <- str_count(my_intro, pattern = "e")
occurrences
## Write another function `double` that takes in a (numeric) variable
## and returns that variable multiplied by two
double <- function(num) {
num_double <- num * 2
return(num_double)
}
## Using your `double` function, create a variable `seconds_in_two_years`,
## which is the number of seconds in two years.
## Always print your results!
seconds_in_two_years <- double(seconds.in.year)
seconds_in_two_years
## Write another function `cube` that takes in a value and returns that value
## cubed
cube <- function(num) {
num_cube <- num^3
return(num_cube)
}
## Create a (suitably named) variable by passing the number 3 to your `cube`
## function
three_cube <- cube(3)
three_cube
## Use for-loop to print cubes of numbers 1..10
## Hint: see course book
# https://faculty.washington.edu/otoomet/info201-book/functions.html#for-loops
for (i in 1:10) {
cubed_numbers <- cube(i)
cat(cubed_numbers, "\n")
}
### ------------------------------ working with vectors ------------------------------
## Create a vector `movies` that contains the names of six movies you like
## Always print your results!
movies <- c("Triangle", "Bullet Train", "The Dark Knight", "Braveheart", "Joker", "It")
movies
## Create a vector `top_three` that only contains the first three movies in the vector.
## Use indexing.
top_three <- movies[1:3]
top_three
## Using your vector and the paste method, create a vector `excited` that adds the phrase -
## " is a great movie!" to the end of each element in your movies vector
phrase <- "is a great movie!"
excited <- c()
for (i in 1:6) {
excited <- c(excited, paste(movies[i], phrase))
}
excited
## Create a vector `without_four` that has your first three movies, and your 5th and 6th movies.
without_four <- movies[-4]
without_four
## Create a vector `numbers` that is the numbers 70 through 79
numbers <- seq(70, 79)
numbers
## Using the built in length function, create a variable `len` that
## is equal to the length of your vector
## `numbers`
len <- length(numbers)
len
## Using the `mean` function, create a variable `numbers_mean` that
## is the mean of your vector `numbers`
numbers_mean <- mean(numbers)
numbers_mean
## Create a vector `lower_numbers` that is the numbers 60:69
lower_numbers <- seq(60,69)
lower_numbers
## Create a vector `all_numbers` that combines your `lower_numbers` and `numbers` vectors
## Ensure the result looks right!
all_numbers <- c(lower_numbers, numbers)
all_numbers
## Which numbers (out of all_numbers) are larger than 70?
## Use logical operations to create a logical
## vector (TRUES/FALSES) that tell which number is larger
larger <- c()
for (i in 1:20) {
if (all_numbers[i] > 70) {
larger <- c(larger, TRUE)
} else {
larger <- c(larger, FALSE)
}
}
larger
## Out of your all numbers, extract only those that are
## smaller than 70
smaller_than_70 <- all_numbers[all_numbers<70]
smaller_than_70
## Compute squares of all those numbers that are smaller
## than 70 in your vector
squared <- c()
for (i in 1:length(smaller_than_70)) {
squared <- c(squared, (smaller_than_70[i])^2)
}
squared
## Compute modulo by 2 of all your numbers.
## Hint: check out the modulo operator '%%'
all_modulo <- c()
for (i in 1:20) {
all_modulo <- c(all_modulo, all_numbers[i]%%2)
}
all_modulo
## Print even numbers only in your vector.
## Do _not_ create the subvector manually, use modulo operator and logical
## indexing to extract the even numbers!
even <- c()
for (i in 1:20) {
if (all_modulo[i] == 0) {
even <- c(even, all_numbers[i])
}
}
even
### ------------------ Challenge ------------------
## Write a function `remove_digits` that will remove all digits
## (i.e. characters '0' through '9')
## from all elements in a
## *vector of strings*.
## For instance, "a2b" -> "ab"
remove_digits <- function(vector_of_strings) {
for (i in 1:length(vector_of_strings)) {
vector_of_strings[i] <- str_remove_all(vector_of_strings[i], "[0-9]")
}
return(vector_of_strings)
}
## Demonstrate that your approach is successful by passing a
## vector of courses to your function
## For example,
## RemoveDigits(c("INFO 201", "CSE 142", "mps-803c", "K2-team '21"))
## should return
## c("INFO "    "CSE "     "mps-c"    "K-team '")
vec <- remove_digits(c("INFO 201", "CSE 142", "mps-803c", "K2-team '21"))
vec
## Write an if/else statement that checks to see if your vector has any digits.
## If it does have
## digits, print "Oh no!", if it does not then print "Yay!"
## Hint: check out the functions 'any' and 'all'
check <- c("INFO 201", "CSE 142", "mps-c", "K2-team '21")
for (i in 1:length(check)) {
argument <- "Yay!"
if (str_detect(check[i], "[0-9]")) {
argument <- "Oh no!"
}
}
cat(argument,"\n")
## ---------- A2: Basic R (variables, vectors, functions) ----------
## -------------------- Set up --------------------
## In this assignment we ask you to use `stringr` package for
## the string functions.
## Read more about it in Wickham & Grolemund "R for Data Science"
## http://r4ds.had.co.nz/strings.html
## Install the library if needed and load it
## Ensure you don't install the library more than once!
## -------------------- Defining variables --------------------
## Here we ask you to define, compute, and print a number of variables
## ---------- Example: ----------
## Create variable `my_name` that is equal to your first name
my_name <- "Ott"
cat("I am", my_name, "\n")
## ---------- end of the example ----------
library("stringr")
## Create a numeric variable `my_age` that is equal to your age
my_age <- 18
my_age
## How many seconds is there in a year?  Compute this number!
## Assign it to a suitably named variable and print the result
## with a informative message
seconds.in.year <- 365.25 * 24 * 60 * 60
seconds.in.year
cat("Number of seconds a year is", seconds.in.year, "\n")
## What is your age in seconds?  Use the variable 'my_age' you computed
## above and seconds-in-year, and compute it.  Assign the result to a
## suitable named variable
seconds.in.age <- my_age * seconds.in.year
seconds.in.age
## Are you more than 650M seconds old?  Perform such logical operation and
## assign the result to a variable 'I_am_old'.  Print the result with a
## suitable message
I_am_old <- seconds.in.age > 650000000
I_am_old
cat("Am I more than 650M seconds old?", I_am_old, "\n")
### How many seconds is a typical human lifetime?
life <- 73 # According to google
life
seconds.in.life <- life * seconds.in.year
seconds.in.life
cat("A typical human life time is", seconds.in.life, "seconds.", "\n")
### -------------------- Working with functions --------------------
## Write a function called `make_introduction` that takes in two
## arguments: name, and age.
## This function should return a string value that says something like
## "Hello, my name is {name}, and I'm {age} years old".
## NB!  It should _return_ the string, not print it!
make_introduction <- function(name, age) {
intro <- paste("Hello, my name is", name, ", and I'm", age, "years old")
return(intro)
}
## Create a variable `my_intro` by passing your variables `my_name` and `my_age`
## into your `make_introduction`
## function.  Always print the result!
my_intro <- make_introduction(my_name, my_age)
my_intro
## Create a variable `casual_intro` by substituting "Hello, my name is ",
## with "Hey, I'm" in your `my_intro`
## variable.  Check out stringr functions
## 'str_replace' and 'str_replace_all'
casual_intro <- str_replace(my_intro, "Hello, my name is", "Hey, I'm")
casual_intro
## Create a new variable `loud_intro`, which is your `my_intro` variable
## in all upper-case letters
loud_intro <- str_to_upper(my_intro)
loud_intro
## Using the `str_count` function, create a variable `occurrences` that
## stores the # of times the letter "e"
## appears in `my_intro`
occurrences <- str_count(my_intro, pattern = "e")
occurrences
## Write another function `double` that takes in a (numeric) variable
## and returns that variable multiplied by two
double <- function(num) {
num_double <- num * 2
return(num_double)
}
## Using your `double` function, create a variable `seconds_in_two_years`,
## which is the number of seconds in two years.
## Always print your results!
seconds_in_two_years <- double(seconds.in.year)
seconds_in_two_years
## Write another function `cube` that takes in a value and returns that value
## cubed
cube <- function(num) {
num_cube <- num^3
return(num_cube)
}
## Create a (suitably named) variable by passing the number 3 to your `cube`
## function
three_cube <- cube(3)
three_cube
## Use for-loop to print cubes of numbers 1..10
## Hint: see course book
# https://faculty.washington.edu/otoomet/info201-book/functions.html#for-loops
for (i in 1:10) {
cubed_numbers <- cube(i)
cat(cubed_numbers, "\n")
}
### ------------------------------ working with vectors ------------------------------
## Create a vector `movies` that contains the names of six movies you like
## Always print your results!
movies <- c("Triangle", "Bullet Train", "The Dark Knight", "Braveheart", "Joker", "It")
movies
## Create a vector `top_three` that only contains the first three movies in the vector.
## Use indexing.
top_three <- movies[1:3]
top_three
## Using your vector and the paste method, create a vector `excited` that adds the phrase -
## " is a great movie!" to the end of each element in your movies vector
phrase <- "is a great movie!"
excited <- c()
for (i in 1:6) {
excited <- c(excited, paste(movies[i], phrase))
}
excited
## Create a vector `without_four` that has your first three movies, and your 5th and 6th movies.
without_four <- movies[-4]
without_four
## Create a vector `numbers` that is the numbers 70 through 79
numbers <- seq(70, 79)
numbers
## Using the built in length function, create a variable `len` that
## is equal to the length of your vector
## `numbers`
len <- length(numbers)
len
## Using the `mean` function, create a variable `numbers_mean` that
## is the mean of your vector `numbers`
numbers_mean <- mean(numbers)
numbers_mean
## Create a vector `lower_numbers` that is the numbers 60:69
lower_numbers <- seq(60,69)
lower_numbers
## Create a vector `all_numbers` that combines your `lower_numbers` and `numbers` vectors
## Ensure the result looks right!
all_numbers <- c(lower_numbers, numbers)
all_numbers
## Which numbers (out of all_numbers) are larger than 70?
## Use logical operations to create a logical
## vector (TRUES/FALSES) that tell which number is larger
larger <- c()
for (i in 1:20) {
if (all_numbers[i] > 70) {
larger <- c(larger, TRUE)
} else {
larger <- c(larger, FALSE)
}
}
larger
## Out of your all numbers, extract only those that are
## smaller than 70
smaller_than_70 <- all_numbers[all_numbers<70]
smaller_than_70
## Compute squares of all those numbers that are smaller
## than 70 in your vector
squared <- c()
for (i in 1:length(smaller_than_70)) {
squared <- c(squared, (smaller_than_70[i])^2)
}
squared
## Compute modulo by 2 of all your numbers.
## Hint: check out the modulo operator '%%'
all_modulo <- c()
for (i in 1:20) {
all_modulo <- c(all_modulo, all_numbers[i]%%2)
}
all_modulo
## Print even numbers only in your vector.
## Do _not_ create the subvector manually, use modulo operator and logical
## indexing to extract the even numbers!
even <- c()
for (i in 1:20) {
if (all_modulo[i] == 0) {
even <- c(even, all_numbers[i])
}
}
even
### ------------------ Challenge ------------------
## Write a function `remove_digits` that will remove all digits
## (i.e. characters '0' through '9')
## from all elements in a
## *vector of strings*.
## For instance, "a2b" -> "ab"
remove_digits <- function(vector_of_strings) {
for (i in 1:length(vector_of_strings)) {
vector_of_strings[i] <- str_remove_all(vector_of_strings[i], "[0-9]")
}
return(vector_of_strings)
}
## Demonstrate that your approach is successful by passing a
## vector of courses to your function
## For example,
## RemoveDigits(c("INFO 201", "CSE 142", "mps-803c", "K2-team '21"))
## should return
## c("INFO "    "CSE "     "mps-c"    "K-team '")
vec <- remove_digits(c("INFO 201", "CSE 142", "mps-803c", "K2-team '21"))
vec
## Write an if/else statement that checks to see if your vector has any digits.
## If it does have
## digits, print "Oh no!", if it does not then print "Yay!"
## Hint: check out the functions 'any' and 'all'
check <- c("INFO 201", "CSE 142", "mps-803c", "K2-team '21")
for (i in 1:length(check)) {
argument <- "Yay!"
if (str_detect(check[i], "[0-9]")) {
argument <- "Oh no!"
}
}
cat(argument,"\n")
name <- c("Qin Shi Huang", "Nicholas II", "Napolen Bonaparte",
"Mehmed VI", "Naruhito")
city <- c("Xianyang", "St Petersburg", "Paris", "Istambul", "Tokyo")
born <- c(-259, 1868, 1769, 1861, 1960)  # negative: BC
throned <- c(-221, 1894, 1804, 1918, 2019)
ruled <- c("China", "Russia", "France", "Ottoman Empire", "Japan")
died <- c(-210, 1918, 1821, 1926, NA)  # Naruhito is alive
emperors <- data.frame(name, born, throned, ruled, died)
emperors
name <- c("Qin Shi Huang", "Nicholas II", "Napolen Bonaparte",
"Mehmed VI", "Naruhito")
city <- c("Xianyang", "St Petersburg", "Paris", "Istambul", "Tokyo")
born <- c(-259, 1868, 1769, 1861, 1960)  # negative: BC
throned <- c(-221, 1894, 1804, 1918, 2019)
ruled <- c("China", "Russia", "France", "Ottoman Empire", "Japan")
died <- c(-210, 1918, 1821, 1926, NA)  # Naruhito is alive
emperors <- data.frame(name, born, throned, ruled, died)
emperors["Qin Shi Huang", "born"]
name <- c("Qin Shi Huang", "Nicholas II", "Napolen Bonaparte",
"Mehmed VI", "Naruhito")
city <- c("Xianyang", "St Petersburg", "Paris", "Istambul", "Tokyo")
born <- c(-259, 1868, 1769, 1861, 1960)  # negative: BC
throned <- c(-221, 1894, 1804, 1918, 2019)
ruled <- c("China", "Russia", "France", "Ottoman Empire", "Japan")
died <- c(-210, 1918, 1821, 1926, NA)  # Naruhito is alive
emperors <- data.frame(name, born, throned, ruled, died)
emperor[emperor$name="Qin Shi Huang", "born"]
name <- c("Qin Shi Huang", "Nicholas II", "Napolen Bonaparte",
"Mehmed VI", "Naruhito")
city <- c("Xianyang", "St Petersburg", "Paris", "Istambul", "Tokyo")
born <- c(-259, 1868, 1769, 1861, 1960)  # negative: BC
throned <- c(-221, 1894, 1804, 1918, 2019)
ruled <- c("China", "Russia", "France", "Ottoman Empire", "Japan")
died <- c(-210, 1918, 1821, 1926, NA)  # Naruhito is alive
emperors <- data.frame(name, born, throned, ruled, died)
emperor[emperor$name=="Qin Shi Huang", "born"]
name <- c("Qin Shi Huang", "Nicholas II", "Napolen Bonaparte",
"Mehmed VI", "Naruhito")
city <- c("Xianyang", "St Petersburg", "Paris", "Istambul", "Tokyo")
born <- c(-259, 1868, 1769, 1861, 1960)  # negative: BC
throned <- c(-221, 1894, 1804, 1918, 2019)
ruled <- c("China", "Russia", "France", "Ottoman Empire", "Japan")
died <- c(-210, 1918, 1821, 1926, NA)  # Naruhito is alive
emperors <- data.frame(name, born, throned, ruled, died)
emperors[emperors$name=="Qin Shi Huang", "born"]
getwd()
getwd()
getwd()
getwd()
setwd("~/UW-STUDY/INFO201/ps5-rmarkdown-plot")
setwd("~/UW-STUDY/INFO201/ps5-rmarkdown-plot")
knitr::opts_chunk$set(echo = TRUE)
gapminder <- read.delim("gapminder.csv.bz2")
View(gapminder)
## Load and check data
2. load data
nrow()
gapminder <- read.delim("gapminder.csv.bz2")
View(gapminder)
nrow(gapminder)
ncol(gapminder)
head(gapminder, 5)
gapminder <- read.delim("gapminder.csv.bz2")
View(gapminder)
nrow(gapminder)
ncol(gapminder)
head(gapminder, 5)
this df has `rnow(gapminder)`
